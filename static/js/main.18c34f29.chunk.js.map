{"version":3,"sources":["components/Test.js","App.js","serviceWorker.js","index.js"],"names":["Test","useState","opened","setOpened","Circle","styled","circle","Circle1","Circle2","Circle3","Button","div","Text","CircleSvg","svg","CircleSvg2","Blur","Center","Elements","ul","ListEl","li","ListEl2","ListEl3","onClick","width","height","cx","cy","r","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"i9HAsLeA,MAnLf,WAAiB,IAAD,EACgBC,oBAAS,GADzB,mBACLC,EADK,KACGC,EADH,KAGNC,EAASC,IAAOC,OAAV,KAINC,EAAUF,IAAOC,OAAV,KAIPE,EAAUH,IAAOC,OAAV,KAIPG,EAAUJ,IAAOC,OAAV,KAKPI,EAASL,IAAOM,IAAV,IAeEP,GASRQ,EAAOP,IAAOM,IAAV,KAIJE,EAAYR,IAAOS,IAAV,KAITC,EAAaV,IAAOS,IAAV,KAKVE,EAAOX,IAAOM,IAAV,IAKIT,EAAQ,QAAU,QAQ1Be,EAASZ,IAAOM,IAAV,KAKNO,EAAWb,IAAOc,GAAV,KAWRC,EAASf,IAAOgB,GAAV,IAaEd,GAIRe,EAAUjB,IAAOgB,GAAV,IAcCb,GAIRe,EAAUlB,IAAOgB,GAAV,IAgBCZ,GAKd,OACC,oCACA,kBAACQ,EAAD,KACG,kBAACD,EAAD,MACA,kBAACN,EAAD,CAAQc,QAAS,kBAAMrB,GAAWD,KAC9B,kBAACU,EAAD,oBAGA,kBAACC,EAAD,CAAWY,MAAO,IAAKC,OAAQ,IAC9B,kBAACtB,EAAD,CAAQuB,GAAG,IAAIC,GAAG,KAAKC,EAAE,UAG7B3B,GAAU,kBAACgB,EAAD,KACC,kBAACE,EAAD,KACA,kBAACL,EAAD,CAAYU,MAAO,IAAKC,OAAQ,IAC5B,kBAACnB,EAAD,CAASoB,GAAG,IAAIC,GAAG,KAAKC,EAAE,SAF9B,0CAMA,kBAACP,EAAD,KACA,kBAACP,EAAD,CAAYU,MAAO,IAAKC,OAAQ,IAC5B,kBAAClB,EAAD,CAASmB,GAAG,IAAIC,GAAG,KAAKC,EAAE,SAF9B,0CAMA,kBAACN,EAAD,KACA,kBAACR,EAAD,CAAYU,MAAO,IAAKC,OAAQ,IAC5B,kBAACjB,EAAD,CAASkB,GAAG,IAAIC,GAAG,KAAKC,EAAE,SAF9B,8CC9JLC,MARf,WACE,OACE,oCACI,kBAAC,EAAD,QCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.18c34f29.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nfunction Test() {\r\n    const [opened, setOpened] = useState(false)\r\n\r\n    const Circle = styled.circle`\r\n        fill: #DF9047;\r\n        transition: .2s\r\n    `\r\n    const Circle1 = styled.circle`\r\n    fill: #DF9047;\r\n    transition: .2s\r\n    `\r\n    const Circle2 = styled.circle`\r\n    fill: #DF9047;\r\n    transition: .2s\r\n    `\r\n    const Circle3 = styled.circle`\r\n    fill: #DF9047;\r\n    transition: .2s\r\n    `\r\n\r\n    const Button = styled.div`\r\n        background-color: #fff;\r\n        justify-content: center;\r\n        position: absolute;\r\n        left: 45%;\r\n        margin-top: 20%;\r\n        border: 2px solid #DF9047;\r\n        border-radius: 30px;\r\n        color: #DF9047;\r\n        width: 203px;\r\n        height: 1.7em;\r\n        font-size: 1.1em;\r\n        display: flex;\r\n        flex-direction: row;\r\n        transition: .2s;      \r\n        &:hover ${Circle}{\r\n            fill: #FFFFFF\r\n        }\r\n        &:hover{\r\n            transition: .2s;\r\n            background-color: #DF9047;\r\n            color: #FFFFFF\r\n        }\r\n        `\r\n    const Text = styled.div`\r\n        padding-top: 3px;\r\n    `\r\n\r\n    const CircleSvg = styled.svg`\r\n        position:absolute;\r\n        margin-left: 120px;\r\n    `\r\n    const CircleSvg2 = styled.svg`\r\n    position:absolute;\r\n    margin-left: -30px;\r\n    `\r\n\r\n    const Blur = styled.div`\r\n        position:fixed;\r\n        width: 220px;\r\n        background: rgba(255, 255, 255, 0.3);\r\n        border-radius: 22px;\r\n        height: ${opened? \"140px\" : \"65px\"};\r\n        background-size: cover;\r\n        filter: blur(9px);\r\n        transform: scale(1.1); \r\n        margin:-9px;\r\n        z-index: -10;\r\n    `\r\n\r\n    const Center = styled.div`\r\n        position: absolute;\r\n        top:30%;\r\n        left:45%;\r\n    `\r\n    const Elements = styled.ul`\r\n        position: absolute;\r\n        z-index: -1;\r\n        background-color: #fff;\r\n        left: 2px;\r\n        width: 164px;\r\n        padding-top: 25px;\r\n        height: 95px;\r\n        border-bottom-left-radius: 15px;\r\n        border-bottom-right-radius: 15px;\r\n    `\r\n    const ListEl = styled.li`\r\n        list-style-type: none;\r\n        position: absolute;\r\n        padding-top: 1px;\r\n        width: 77%;\r\n        left: 0;\r\n        padding-left: 3rem;\r\n        padding-bottom: 3px;\r\n        font-size: 1.1em;\r\n        transition: .3s;\r\n        &:hover{\r\n            background-color: #DF9047;\r\n        }\r\n        &:hover ${Circle1}{\r\n            fill: #fff;\r\n        }\r\n    `\r\n    const ListEl2 = styled.li`\r\n        list-style-type: none;\r\n        position: absolute;\r\n        padding-top: 3px;\r\n        width: 77%;\r\n        left: 0;\r\n        margin-top: 30px;\r\n        padding-left: 3rem;\r\n        padding-bottom: 3px;\r\n        font-size: 1.1em;\r\n        transition: .3s;\r\n        &:hover{\r\n            background-color: #DF9047;\r\n        }\r\n        &:hover ${Circle2}{\r\n            fill: #fff;\r\n        }\r\n    `\r\n    const ListEl3 = styled.li`\r\n        list-style-type: none;\r\n        position: absolute;\r\n        padding-top: 3px;\r\n        width: 77%;\r\n        left: 0;\r\n        margin-top: 60px;\r\n        padding-left: 3rem;\r\n        padding-bottom: 9.1px;\r\n        font-size: 1.1em;\r\n        border-bottom-left-radius: 15px;\r\n        border-bottom-right-radius: 15px;\r\n        transition: .3s;\r\n        &:hover{\r\n            background-color: #DF9047;\r\n        }\r\n        &:hover ${Circle3}{\r\n            fill: #fff;\r\n        }\r\n    `\r\n\r\n    return (\r\n     <>\r\n     <Center>\r\n        <Blur />\r\n        <Button onClick={() => setOpened(!opened)}>   \r\n            <Text>\r\n            Title Title\r\n            </Text>\r\n            <CircleSvg width={100} height={40}>\r\n             <Circle cx=\"9\" cy=\"15\" r=\"8.3\"/>\r\n            </CircleSvg> \r\n        </Button> \r\n        {opened && <Elements>\r\n                    <ListEl>\r\n                    <CircleSvg2 width={100} height={40}>\r\n                        <Circle1 cx=\"9\" cy=\"13\" r=\"8.3\"/>\r\n                    </CircleSvg2> \r\n                        Кнопка 1\r\n                    </ListEl>\r\n                    <ListEl2>\r\n                    <CircleSvg2 width={100} height={40}>\r\n                        <Circle2 cx=\"9\" cy=\"13\" r=\"8.3\"/>\r\n                    </CircleSvg2> \r\n                        Кнопка 2\r\n                    </ListEl2>\r\n                    <ListEl3>\r\n                    <CircleSvg2 width={100} height={40}>\r\n                        <Circle3 cx=\"9\" cy=\"13\" r=\"8.3\"/>\r\n                    </CircleSvg2> \r\n                        Кнопка 3\r\n                    </ListEl3>\r\n        </Elements>}\r\n        </Center>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Test\r\n","import React from 'react';\nimport './App.css';\nimport Test from './components/Test';\n\nfunction App() {\n  return (\n    <>\n        <Test />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}